
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ConditionIssue` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ConditionIssue
 * 
 */
export type ConditionIssueModel = runtime.Types.Result.DefaultSelection<Prisma.$ConditionIssuePayload>

export type AggregateConditionIssue = {
  _count: ConditionIssueCountAggregateOutputType | null
  _min: ConditionIssueMinAggregateOutputType | null
  _max: ConditionIssueMaxAggregateOutputType | null
}

export type ConditionIssueMinAggregateOutputType = {
  id: string | null
  issueKey: string | null
  title: string | null
  description: string | null
  icon: string | null
  vehicleAssessmentId: string | null
}

export type ConditionIssueMaxAggregateOutputType = {
  id: string | null
  issueKey: string | null
  title: string | null
  description: string | null
  icon: string | null
  vehicleAssessmentId: string | null
}

export type ConditionIssueCountAggregateOutputType = {
  id: number
  issueKey: number
  title: number
  description: number
  icon: number
  vehicleAssessmentId: number
  _all: number
}


export type ConditionIssueMinAggregateInputType = {
  id?: true
  issueKey?: true
  title?: true
  description?: true
  icon?: true
  vehicleAssessmentId?: true
}

export type ConditionIssueMaxAggregateInputType = {
  id?: true
  issueKey?: true
  title?: true
  description?: true
  icon?: true
  vehicleAssessmentId?: true
}

export type ConditionIssueCountAggregateInputType = {
  id?: true
  issueKey?: true
  title?: true
  description?: true
  icon?: true
  vehicleAssessmentId?: true
  _all?: true
}

export type ConditionIssueAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ConditionIssue to aggregate.
   */
  where?: Prisma.ConditionIssueWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConditionIssues to fetch.
   */
  orderBy?: Prisma.ConditionIssueOrderByWithRelationInput | Prisma.ConditionIssueOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ConditionIssueWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConditionIssues from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConditionIssues.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ConditionIssues
  **/
  _count?: true | ConditionIssueCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ConditionIssueMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ConditionIssueMaxAggregateInputType
}

export type GetConditionIssueAggregateType<T extends ConditionIssueAggregateArgs> = {
      [P in keyof T & keyof AggregateConditionIssue]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateConditionIssue[P]>
    : Prisma.GetScalarType<T[P], AggregateConditionIssue[P]>
}




export type ConditionIssueGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ConditionIssueWhereInput
  orderBy?: Prisma.ConditionIssueOrderByWithAggregationInput | Prisma.ConditionIssueOrderByWithAggregationInput[]
  by: Prisma.ConditionIssueScalarFieldEnum[] | Prisma.ConditionIssueScalarFieldEnum
  having?: Prisma.ConditionIssueScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ConditionIssueCountAggregateInputType | true
  _min?: ConditionIssueMinAggregateInputType
  _max?: ConditionIssueMaxAggregateInputType
}

export type ConditionIssueGroupByOutputType = {
  id: string
  issueKey: string
  title: string
  description: string
  icon: string
  vehicleAssessmentId: string
  _count: ConditionIssueCountAggregateOutputType | null
  _min: ConditionIssueMinAggregateOutputType | null
  _max: ConditionIssueMaxAggregateOutputType | null
}

type GetConditionIssueGroupByPayload<T extends ConditionIssueGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ConditionIssueGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ConditionIssueGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ConditionIssueGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ConditionIssueGroupByOutputType[P]>
      }
    >
  >



export type ConditionIssueWhereInput = {
  AND?: Prisma.ConditionIssueWhereInput | Prisma.ConditionIssueWhereInput[]
  OR?: Prisma.ConditionIssueWhereInput[]
  NOT?: Prisma.ConditionIssueWhereInput | Prisma.ConditionIssueWhereInput[]
  id?: Prisma.StringFilter<"ConditionIssue"> | string
  issueKey?: Prisma.StringFilter<"ConditionIssue"> | string
  title?: Prisma.StringFilter<"ConditionIssue"> | string
  description?: Prisma.StringFilter<"ConditionIssue"> | string
  icon?: Prisma.StringFilter<"ConditionIssue"> | string
  vehicleAssessmentId?: Prisma.StringFilter<"ConditionIssue"> | string
  vehicleAssessment?: Prisma.XOR<Prisma.VehicleAssessmentScalarRelationFilter, Prisma.VehicleAssessmentWhereInput>
}

export type ConditionIssueOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  issueKey?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  icon?: Prisma.SortOrder
  vehicleAssessmentId?: Prisma.SortOrder
  vehicleAssessment?: Prisma.VehicleAssessmentOrderByWithRelationInput
}

export type ConditionIssueWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ConditionIssueWhereInput | Prisma.ConditionIssueWhereInput[]
  OR?: Prisma.ConditionIssueWhereInput[]
  NOT?: Prisma.ConditionIssueWhereInput | Prisma.ConditionIssueWhereInput[]
  issueKey?: Prisma.StringFilter<"ConditionIssue"> | string
  title?: Prisma.StringFilter<"ConditionIssue"> | string
  description?: Prisma.StringFilter<"ConditionIssue"> | string
  icon?: Prisma.StringFilter<"ConditionIssue"> | string
  vehicleAssessmentId?: Prisma.StringFilter<"ConditionIssue"> | string
  vehicleAssessment?: Prisma.XOR<Prisma.VehicleAssessmentScalarRelationFilter, Prisma.VehicleAssessmentWhereInput>
}, "id">

export type ConditionIssueOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  issueKey?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  icon?: Prisma.SortOrder
  vehicleAssessmentId?: Prisma.SortOrder
  _count?: Prisma.ConditionIssueCountOrderByAggregateInput
  _max?: Prisma.ConditionIssueMaxOrderByAggregateInput
  _min?: Prisma.ConditionIssueMinOrderByAggregateInput
}

export type ConditionIssueScalarWhereWithAggregatesInput = {
  AND?: Prisma.ConditionIssueScalarWhereWithAggregatesInput | Prisma.ConditionIssueScalarWhereWithAggregatesInput[]
  OR?: Prisma.ConditionIssueScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ConditionIssueScalarWhereWithAggregatesInput | Prisma.ConditionIssueScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ConditionIssue"> | string
  issueKey?: Prisma.StringWithAggregatesFilter<"ConditionIssue"> | string
  title?: Prisma.StringWithAggregatesFilter<"ConditionIssue"> | string
  description?: Prisma.StringWithAggregatesFilter<"ConditionIssue"> | string
  icon?: Prisma.StringWithAggregatesFilter<"ConditionIssue"> | string
  vehicleAssessmentId?: Prisma.StringWithAggregatesFilter<"ConditionIssue"> | string
}

export type ConditionIssueCreateInput = {
  id?: string
  issueKey: string
  title: string
  description: string
  icon: string
  vehicleAssessment: Prisma.VehicleAssessmentCreateNestedOneWithoutConditionIssuesInput
}

export type ConditionIssueUncheckedCreateInput = {
  id?: string
  issueKey: string
  title: string
  description: string
  icon: string
  vehicleAssessmentId: string
}

export type ConditionIssueUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  issueKey?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.StringFieldUpdateOperationsInput | string
  vehicleAssessment?: Prisma.VehicleAssessmentUpdateOneRequiredWithoutConditionIssuesNestedInput
}

export type ConditionIssueUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  issueKey?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.StringFieldUpdateOperationsInput | string
  vehicleAssessmentId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ConditionIssueCreateManyInput = {
  id?: string
  issueKey: string
  title: string
  description: string
  icon: string
  vehicleAssessmentId: string
}

export type ConditionIssueUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  issueKey?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ConditionIssueUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  issueKey?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.StringFieldUpdateOperationsInput | string
  vehicleAssessmentId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ConditionIssueListRelationFilter = {
  every?: Prisma.ConditionIssueWhereInput
  some?: Prisma.ConditionIssueWhereInput
  none?: Prisma.ConditionIssueWhereInput
}

export type ConditionIssueOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ConditionIssueCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  issueKey?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  icon?: Prisma.SortOrder
  vehicleAssessmentId?: Prisma.SortOrder
}

export type ConditionIssueMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  issueKey?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  icon?: Prisma.SortOrder
  vehicleAssessmentId?: Prisma.SortOrder
}

export type ConditionIssueMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  issueKey?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  icon?: Prisma.SortOrder
  vehicleAssessmentId?: Prisma.SortOrder
}

export type ConditionIssueCreateNestedManyWithoutVehicleAssessmentInput = {
  create?: Prisma.XOR<Prisma.ConditionIssueCreateWithoutVehicleAssessmentInput, Prisma.ConditionIssueUncheckedCreateWithoutVehicleAssessmentInput> | Prisma.ConditionIssueCreateWithoutVehicleAssessmentInput[] | Prisma.ConditionIssueUncheckedCreateWithoutVehicleAssessmentInput[]
  connectOrCreate?: Prisma.ConditionIssueCreateOrConnectWithoutVehicleAssessmentInput | Prisma.ConditionIssueCreateOrConnectWithoutVehicleAssessmentInput[]
  createMany?: Prisma.ConditionIssueCreateManyVehicleAssessmentInputEnvelope
  connect?: Prisma.ConditionIssueWhereUniqueInput | Prisma.ConditionIssueWhereUniqueInput[]
}

export type ConditionIssueUncheckedCreateNestedManyWithoutVehicleAssessmentInput = {
  create?: Prisma.XOR<Prisma.ConditionIssueCreateWithoutVehicleAssessmentInput, Prisma.ConditionIssueUncheckedCreateWithoutVehicleAssessmentInput> | Prisma.ConditionIssueCreateWithoutVehicleAssessmentInput[] | Prisma.ConditionIssueUncheckedCreateWithoutVehicleAssessmentInput[]
  connectOrCreate?: Prisma.ConditionIssueCreateOrConnectWithoutVehicleAssessmentInput | Prisma.ConditionIssueCreateOrConnectWithoutVehicleAssessmentInput[]
  createMany?: Prisma.ConditionIssueCreateManyVehicleAssessmentInputEnvelope
  connect?: Prisma.ConditionIssueWhereUniqueInput | Prisma.ConditionIssueWhereUniqueInput[]
}

export type ConditionIssueUpdateManyWithoutVehicleAssessmentNestedInput = {
  create?: Prisma.XOR<Prisma.ConditionIssueCreateWithoutVehicleAssessmentInput, Prisma.ConditionIssueUncheckedCreateWithoutVehicleAssessmentInput> | Prisma.ConditionIssueCreateWithoutVehicleAssessmentInput[] | Prisma.ConditionIssueUncheckedCreateWithoutVehicleAssessmentInput[]
  connectOrCreate?: Prisma.ConditionIssueCreateOrConnectWithoutVehicleAssessmentInput | Prisma.ConditionIssueCreateOrConnectWithoutVehicleAssessmentInput[]
  upsert?: Prisma.ConditionIssueUpsertWithWhereUniqueWithoutVehicleAssessmentInput | Prisma.ConditionIssueUpsertWithWhereUniqueWithoutVehicleAssessmentInput[]
  createMany?: Prisma.ConditionIssueCreateManyVehicleAssessmentInputEnvelope
  set?: Prisma.ConditionIssueWhereUniqueInput | Prisma.ConditionIssueWhereUniqueInput[]
  disconnect?: Prisma.ConditionIssueWhereUniqueInput | Prisma.ConditionIssueWhereUniqueInput[]
  delete?: Prisma.ConditionIssueWhereUniqueInput | Prisma.ConditionIssueWhereUniqueInput[]
  connect?: Prisma.ConditionIssueWhereUniqueInput | Prisma.ConditionIssueWhereUniqueInput[]
  update?: Prisma.ConditionIssueUpdateWithWhereUniqueWithoutVehicleAssessmentInput | Prisma.ConditionIssueUpdateWithWhereUniqueWithoutVehicleAssessmentInput[]
  updateMany?: Prisma.ConditionIssueUpdateManyWithWhereWithoutVehicleAssessmentInput | Prisma.ConditionIssueUpdateManyWithWhereWithoutVehicleAssessmentInput[]
  deleteMany?: Prisma.ConditionIssueScalarWhereInput | Prisma.ConditionIssueScalarWhereInput[]
}

export type ConditionIssueUncheckedUpdateManyWithoutVehicleAssessmentNestedInput = {
  create?: Prisma.XOR<Prisma.ConditionIssueCreateWithoutVehicleAssessmentInput, Prisma.ConditionIssueUncheckedCreateWithoutVehicleAssessmentInput> | Prisma.ConditionIssueCreateWithoutVehicleAssessmentInput[] | Prisma.ConditionIssueUncheckedCreateWithoutVehicleAssessmentInput[]
  connectOrCreate?: Prisma.ConditionIssueCreateOrConnectWithoutVehicleAssessmentInput | Prisma.ConditionIssueCreateOrConnectWithoutVehicleAssessmentInput[]
  upsert?: Prisma.ConditionIssueUpsertWithWhereUniqueWithoutVehicleAssessmentInput | Prisma.ConditionIssueUpsertWithWhereUniqueWithoutVehicleAssessmentInput[]
  createMany?: Prisma.ConditionIssueCreateManyVehicleAssessmentInputEnvelope
  set?: Prisma.ConditionIssueWhereUniqueInput | Prisma.ConditionIssueWhereUniqueInput[]
  disconnect?: Prisma.ConditionIssueWhereUniqueInput | Prisma.ConditionIssueWhereUniqueInput[]
  delete?: Prisma.ConditionIssueWhereUniqueInput | Prisma.ConditionIssueWhereUniqueInput[]
  connect?: Prisma.ConditionIssueWhereUniqueInput | Prisma.ConditionIssueWhereUniqueInput[]
  update?: Prisma.ConditionIssueUpdateWithWhereUniqueWithoutVehicleAssessmentInput | Prisma.ConditionIssueUpdateWithWhereUniqueWithoutVehicleAssessmentInput[]
  updateMany?: Prisma.ConditionIssueUpdateManyWithWhereWithoutVehicleAssessmentInput | Prisma.ConditionIssueUpdateManyWithWhereWithoutVehicleAssessmentInput[]
  deleteMany?: Prisma.ConditionIssueScalarWhereInput | Prisma.ConditionIssueScalarWhereInput[]
}

export type ConditionIssueCreateWithoutVehicleAssessmentInput = {
  id?: string
  issueKey: string
  title: string
  description: string
  icon: string
}

export type ConditionIssueUncheckedCreateWithoutVehicleAssessmentInput = {
  id?: string
  issueKey: string
  title: string
  description: string
  icon: string
}

export type ConditionIssueCreateOrConnectWithoutVehicleAssessmentInput = {
  where: Prisma.ConditionIssueWhereUniqueInput
  create: Prisma.XOR<Prisma.ConditionIssueCreateWithoutVehicleAssessmentInput, Prisma.ConditionIssueUncheckedCreateWithoutVehicleAssessmentInput>
}

export type ConditionIssueCreateManyVehicleAssessmentInputEnvelope = {
  data: Prisma.ConditionIssueCreateManyVehicleAssessmentInput | Prisma.ConditionIssueCreateManyVehicleAssessmentInput[]
  skipDuplicates?: boolean
}

export type ConditionIssueUpsertWithWhereUniqueWithoutVehicleAssessmentInput = {
  where: Prisma.ConditionIssueWhereUniqueInput
  update: Prisma.XOR<Prisma.ConditionIssueUpdateWithoutVehicleAssessmentInput, Prisma.ConditionIssueUncheckedUpdateWithoutVehicleAssessmentInput>
  create: Prisma.XOR<Prisma.ConditionIssueCreateWithoutVehicleAssessmentInput, Prisma.ConditionIssueUncheckedCreateWithoutVehicleAssessmentInput>
}

export type ConditionIssueUpdateWithWhereUniqueWithoutVehicleAssessmentInput = {
  where: Prisma.ConditionIssueWhereUniqueInput
  data: Prisma.XOR<Prisma.ConditionIssueUpdateWithoutVehicleAssessmentInput, Prisma.ConditionIssueUncheckedUpdateWithoutVehicleAssessmentInput>
}

export type ConditionIssueUpdateManyWithWhereWithoutVehicleAssessmentInput = {
  where: Prisma.ConditionIssueScalarWhereInput
  data: Prisma.XOR<Prisma.ConditionIssueUpdateManyMutationInput, Prisma.ConditionIssueUncheckedUpdateManyWithoutVehicleAssessmentInput>
}

export type ConditionIssueScalarWhereInput = {
  AND?: Prisma.ConditionIssueScalarWhereInput | Prisma.ConditionIssueScalarWhereInput[]
  OR?: Prisma.ConditionIssueScalarWhereInput[]
  NOT?: Prisma.ConditionIssueScalarWhereInput | Prisma.ConditionIssueScalarWhereInput[]
  id?: Prisma.StringFilter<"ConditionIssue"> | string
  issueKey?: Prisma.StringFilter<"ConditionIssue"> | string
  title?: Prisma.StringFilter<"ConditionIssue"> | string
  description?: Prisma.StringFilter<"ConditionIssue"> | string
  icon?: Prisma.StringFilter<"ConditionIssue"> | string
  vehicleAssessmentId?: Prisma.StringFilter<"ConditionIssue"> | string
}

export type ConditionIssueCreateManyVehicleAssessmentInput = {
  id?: string
  issueKey: string
  title: string
  description: string
  icon: string
}

export type ConditionIssueUpdateWithoutVehicleAssessmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  issueKey?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ConditionIssueUncheckedUpdateWithoutVehicleAssessmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  issueKey?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ConditionIssueUncheckedUpdateManyWithoutVehicleAssessmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  issueKey?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.StringFieldUpdateOperationsInput | string
}



export type ConditionIssueSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  issueKey?: boolean
  title?: boolean
  description?: boolean
  icon?: boolean
  vehicleAssessmentId?: boolean
  vehicleAssessment?: boolean | Prisma.VehicleAssessmentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["conditionIssue"]>

export type ConditionIssueSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  issueKey?: boolean
  title?: boolean
  description?: boolean
  icon?: boolean
  vehicleAssessmentId?: boolean
  vehicleAssessment?: boolean | Prisma.VehicleAssessmentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["conditionIssue"]>

export type ConditionIssueSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  issueKey?: boolean
  title?: boolean
  description?: boolean
  icon?: boolean
  vehicleAssessmentId?: boolean
  vehicleAssessment?: boolean | Prisma.VehicleAssessmentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["conditionIssue"]>

export type ConditionIssueSelectScalar = {
  id?: boolean
  issueKey?: boolean
  title?: boolean
  description?: boolean
  icon?: boolean
  vehicleAssessmentId?: boolean
}

export type ConditionIssueOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "issueKey" | "title" | "description" | "icon" | "vehicleAssessmentId", ExtArgs["result"]["conditionIssue"]>
export type ConditionIssueInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  vehicleAssessment?: boolean | Prisma.VehicleAssessmentDefaultArgs<ExtArgs>
}
export type ConditionIssueIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  vehicleAssessment?: boolean | Prisma.VehicleAssessmentDefaultArgs<ExtArgs>
}
export type ConditionIssueIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  vehicleAssessment?: boolean | Prisma.VehicleAssessmentDefaultArgs<ExtArgs>
}

export type $ConditionIssuePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ConditionIssue"
  objects: {
    vehicleAssessment: Prisma.$VehicleAssessmentPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    issueKey: string
    title: string
    description: string
    icon: string
    vehicleAssessmentId: string
  }, ExtArgs["result"]["conditionIssue"]>
  composites: {}
}

export type ConditionIssueGetPayload<S extends boolean | null | undefined | ConditionIssueDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ConditionIssuePayload, S>

export type ConditionIssueCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ConditionIssueFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ConditionIssueCountAggregateInputType | true
  }

export interface ConditionIssueDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConditionIssue'], meta: { name: 'ConditionIssue' } }
  /**
   * Find zero or one ConditionIssue that matches the filter.
   * @param {ConditionIssueFindUniqueArgs} args - Arguments to find a ConditionIssue
   * @example
   * // Get one ConditionIssue
   * const conditionIssue = await prisma.conditionIssue.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ConditionIssueFindUniqueArgs>(args: Prisma.SelectSubset<T, ConditionIssueFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ConditionIssueClient<runtime.Types.Result.GetResult<Prisma.$ConditionIssuePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ConditionIssue that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ConditionIssueFindUniqueOrThrowArgs} args - Arguments to find a ConditionIssue
   * @example
   * // Get one ConditionIssue
   * const conditionIssue = await prisma.conditionIssue.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ConditionIssueFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ConditionIssueFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ConditionIssueClient<runtime.Types.Result.GetResult<Prisma.$ConditionIssuePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ConditionIssue that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConditionIssueFindFirstArgs} args - Arguments to find a ConditionIssue
   * @example
   * // Get one ConditionIssue
   * const conditionIssue = await prisma.conditionIssue.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ConditionIssueFindFirstArgs>(args?: Prisma.SelectSubset<T, ConditionIssueFindFirstArgs<ExtArgs>>): Prisma.Prisma__ConditionIssueClient<runtime.Types.Result.GetResult<Prisma.$ConditionIssuePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ConditionIssue that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConditionIssueFindFirstOrThrowArgs} args - Arguments to find a ConditionIssue
   * @example
   * // Get one ConditionIssue
   * const conditionIssue = await prisma.conditionIssue.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ConditionIssueFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ConditionIssueFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ConditionIssueClient<runtime.Types.Result.GetResult<Prisma.$ConditionIssuePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ConditionIssues that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConditionIssueFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ConditionIssues
   * const conditionIssues = await prisma.conditionIssue.findMany()
   * 
   * // Get first 10 ConditionIssues
   * const conditionIssues = await prisma.conditionIssue.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const conditionIssueWithIdOnly = await prisma.conditionIssue.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ConditionIssueFindManyArgs>(args?: Prisma.SelectSubset<T, ConditionIssueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConditionIssuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ConditionIssue.
   * @param {ConditionIssueCreateArgs} args - Arguments to create a ConditionIssue.
   * @example
   * // Create one ConditionIssue
   * const ConditionIssue = await prisma.conditionIssue.create({
   *   data: {
   *     // ... data to create a ConditionIssue
   *   }
   * })
   * 
   */
  create<T extends ConditionIssueCreateArgs>(args: Prisma.SelectSubset<T, ConditionIssueCreateArgs<ExtArgs>>): Prisma.Prisma__ConditionIssueClient<runtime.Types.Result.GetResult<Prisma.$ConditionIssuePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ConditionIssues.
   * @param {ConditionIssueCreateManyArgs} args - Arguments to create many ConditionIssues.
   * @example
   * // Create many ConditionIssues
   * const conditionIssue = await prisma.conditionIssue.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ConditionIssueCreateManyArgs>(args?: Prisma.SelectSubset<T, ConditionIssueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ConditionIssues and returns the data saved in the database.
   * @param {ConditionIssueCreateManyAndReturnArgs} args - Arguments to create many ConditionIssues.
   * @example
   * // Create many ConditionIssues
   * const conditionIssue = await prisma.conditionIssue.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ConditionIssues and only return the `id`
   * const conditionIssueWithIdOnly = await prisma.conditionIssue.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ConditionIssueCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ConditionIssueCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConditionIssuePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ConditionIssue.
   * @param {ConditionIssueDeleteArgs} args - Arguments to delete one ConditionIssue.
   * @example
   * // Delete one ConditionIssue
   * const ConditionIssue = await prisma.conditionIssue.delete({
   *   where: {
   *     // ... filter to delete one ConditionIssue
   *   }
   * })
   * 
   */
  delete<T extends ConditionIssueDeleteArgs>(args: Prisma.SelectSubset<T, ConditionIssueDeleteArgs<ExtArgs>>): Prisma.Prisma__ConditionIssueClient<runtime.Types.Result.GetResult<Prisma.$ConditionIssuePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ConditionIssue.
   * @param {ConditionIssueUpdateArgs} args - Arguments to update one ConditionIssue.
   * @example
   * // Update one ConditionIssue
   * const conditionIssue = await prisma.conditionIssue.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ConditionIssueUpdateArgs>(args: Prisma.SelectSubset<T, ConditionIssueUpdateArgs<ExtArgs>>): Prisma.Prisma__ConditionIssueClient<runtime.Types.Result.GetResult<Prisma.$ConditionIssuePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ConditionIssues.
   * @param {ConditionIssueDeleteManyArgs} args - Arguments to filter ConditionIssues to delete.
   * @example
   * // Delete a few ConditionIssues
   * const { count } = await prisma.conditionIssue.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ConditionIssueDeleteManyArgs>(args?: Prisma.SelectSubset<T, ConditionIssueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ConditionIssues.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConditionIssueUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ConditionIssues
   * const conditionIssue = await prisma.conditionIssue.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ConditionIssueUpdateManyArgs>(args: Prisma.SelectSubset<T, ConditionIssueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ConditionIssues and returns the data updated in the database.
   * @param {ConditionIssueUpdateManyAndReturnArgs} args - Arguments to update many ConditionIssues.
   * @example
   * // Update many ConditionIssues
   * const conditionIssue = await prisma.conditionIssue.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ConditionIssues and only return the `id`
   * const conditionIssueWithIdOnly = await prisma.conditionIssue.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ConditionIssueUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ConditionIssueUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConditionIssuePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ConditionIssue.
   * @param {ConditionIssueUpsertArgs} args - Arguments to update or create a ConditionIssue.
   * @example
   * // Update or create a ConditionIssue
   * const conditionIssue = await prisma.conditionIssue.upsert({
   *   create: {
   *     // ... data to create a ConditionIssue
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ConditionIssue we want to update
   *   }
   * })
   */
  upsert<T extends ConditionIssueUpsertArgs>(args: Prisma.SelectSubset<T, ConditionIssueUpsertArgs<ExtArgs>>): Prisma.Prisma__ConditionIssueClient<runtime.Types.Result.GetResult<Prisma.$ConditionIssuePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ConditionIssues.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConditionIssueCountArgs} args - Arguments to filter ConditionIssues to count.
   * @example
   * // Count the number of ConditionIssues
   * const count = await prisma.conditionIssue.count({
   *   where: {
   *     // ... the filter for the ConditionIssues we want to count
   *   }
   * })
  **/
  count<T extends ConditionIssueCountArgs>(
    args?: Prisma.Subset<T, ConditionIssueCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ConditionIssueCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ConditionIssue.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConditionIssueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ConditionIssueAggregateArgs>(args: Prisma.Subset<T, ConditionIssueAggregateArgs>): Prisma.PrismaPromise<GetConditionIssueAggregateType<T>>

  /**
   * Group by ConditionIssue.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConditionIssueGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ConditionIssueGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ConditionIssueGroupByArgs['orderBy'] }
      : { orderBy?: ConditionIssueGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ConditionIssueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConditionIssueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ConditionIssue model
 */
readonly fields: ConditionIssueFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ConditionIssue.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ConditionIssueClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  vehicleAssessment<T extends Prisma.VehicleAssessmentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.VehicleAssessmentDefaultArgs<ExtArgs>>): Prisma.Prisma__VehicleAssessmentClient<runtime.Types.Result.GetResult<Prisma.$VehicleAssessmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ConditionIssue model
 */
export interface ConditionIssueFieldRefs {
  readonly id: Prisma.FieldRef<"ConditionIssue", 'String'>
  readonly issueKey: Prisma.FieldRef<"ConditionIssue", 'String'>
  readonly title: Prisma.FieldRef<"ConditionIssue", 'String'>
  readonly description: Prisma.FieldRef<"ConditionIssue", 'String'>
  readonly icon: Prisma.FieldRef<"ConditionIssue", 'String'>
  readonly vehicleAssessmentId: Prisma.FieldRef<"ConditionIssue", 'String'>
}
    

// Custom InputTypes
/**
 * ConditionIssue findUnique
 */
export type ConditionIssueFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConditionIssue
   */
  select?: Prisma.ConditionIssueSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConditionIssue
   */
  omit?: Prisma.ConditionIssueOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConditionIssueInclude<ExtArgs> | null
  /**
   * Filter, which ConditionIssue to fetch.
   */
  where: Prisma.ConditionIssueWhereUniqueInput
}

/**
 * ConditionIssue findUniqueOrThrow
 */
export type ConditionIssueFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConditionIssue
   */
  select?: Prisma.ConditionIssueSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConditionIssue
   */
  omit?: Prisma.ConditionIssueOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConditionIssueInclude<ExtArgs> | null
  /**
   * Filter, which ConditionIssue to fetch.
   */
  where: Prisma.ConditionIssueWhereUniqueInput
}

/**
 * ConditionIssue findFirst
 */
export type ConditionIssueFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConditionIssue
   */
  select?: Prisma.ConditionIssueSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConditionIssue
   */
  omit?: Prisma.ConditionIssueOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConditionIssueInclude<ExtArgs> | null
  /**
   * Filter, which ConditionIssue to fetch.
   */
  where?: Prisma.ConditionIssueWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConditionIssues to fetch.
   */
  orderBy?: Prisma.ConditionIssueOrderByWithRelationInput | Prisma.ConditionIssueOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ConditionIssues.
   */
  cursor?: Prisma.ConditionIssueWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConditionIssues from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConditionIssues.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ConditionIssues.
   */
  distinct?: Prisma.ConditionIssueScalarFieldEnum | Prisma.ConditionIssueScalarFieldEnum[]
}

/**
 * ConditionIssue findFirstOrThrow
 */
export type ConditionIssueFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConditionIssue
   */
  select?: Prisma.ConditionIssueSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConditionIssue
   */
  omit?: Prisma.ConditionIssueOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConditionIssueInclude<ExtArgs> | null
  /**
   * Filter, which ConditionIssue to fetch.
   */
  where?: Prisma.ConditionIssueWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConditionIssues to fetch.
   */
  orderBy?: Prisma.ConditionIssueOrderByWithRelationInput | Prisma.ConditionIssueOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ConditionIssues.
   */
  cursor?: Prisma.ConditionIssueWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConditionIssues from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConditionIssues.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ConditionIssues.
   */
  distinct?: Prisma.ConditionIssueScalarFieldEnum | Prisma.ConditionIssueScalarFieldEnum[]
}

/**
 * ConditionIssue findMany
 */
export type ConditionIssueFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConditionIssue
   */
  select?: Prisma.ConditionIssueSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConditionIssue
   */
  omit?: Prisma.ConditionIssueOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConditionIssueInclude<ExtArgs> | null
  /**
   * Filter, which ConditionIssues to fetch.
   */
  where?: Prisma.ConditionIssueWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConditionIssues to fetch.
   */
  orderBy?: Prisma.ConditionIssueOrderByWithRelationInput | Prisma.ConditionIssueOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ConditionIssues.
   */
  cursor?: Prisma.ConditionIssueWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConditionIssues from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConditionIssues.
   */
  skip?: number
  distinct?: Prisma.ConditionIssueScalarFieldEnum | Prisma.ConditionIssueScalarFieldEnum[]
}

/**
 * ConditionIssue create
 */
export type ConditionIssueCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConditionIssue
   */
  select?: Prisma.ConditionIssueSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConditionIssue
   */
  omit?: Prisma.ConditionIssueOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConditionIssueInclude<ExtArgs> | null
  /**
   * The data needed to create a ConditionIssue.
   */
  data: Prisma.XOR<Prisma.ConditionIssueCreateInput, Prisma.ConditionIssueUncheckedCreateInput>
}

/**
 * ConditionIssue createMany
 */
export type ConditionIssueCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ConditionIssues.
   */
  data: Prisma.ConditionIssueCreateManyInput | Prisma.ConditionIssueCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ConditionIssue createManyAndReturn
 */
export type ConditionIssueCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConditionIssue
   */
  select?: Prisma.ConditionIssueSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ConditionIssue
   */
  omit?: Prisma.ConditionIssueOmit<ExtArgs> | null
  /**
   * The data used to create many ConditionIssues.
   */
  data: Prisma.ConditionIssueCreateManyInput | Prisma.ConditionIssueCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConditionIssueIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ConditionIssue update
 */
export type ConditionIssueUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConditionIssue
   */
  select?: Prisma.ConditionIssueSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConditionIssue
   */
  omit?: Prisma.ConditionIssueOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConditionIssueInclude<ExtArgs> | null
  /**
   * The data needed to update a ConditionIssue.
   */
  data: Prisma.XOR<Prisma.ConditionIssueUpdateInput, Prisma.ConditionIssueUncheckedUpdateInput>
  /**
   * Choose, which ConditionIssue to update.
   */
  where: Prisma.ConditionIssueWhereUniqueInput
}

/**
 * ConditionIssue updateMany
 */
export type ConditionIssueUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ConditionIssues.
   */
  data: Prisma.XOR<Prisma.ConditionIssueUpdateManyMutationInput, Prisma.ConditionIssueUncheckedUpdateManyInput>
  /**
   * Filter which ConditionIssues to update
   */
  where?: Prisma.ConditionIssueWhereInput
  /**
   * Limit how many ConditionIssues to update.
   */
  limit?: number
}

/**
 * ConditionIssue updateManyAndReturn
 */
export type ConditionIssueUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConditionIssue
   */
  select?: Prisma.ConditionIssueSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ConditionIssue
   */
  omit?: Prisma.ConditionIssueOmit<ExtArgs> | null
  /**
   * The data used to update ConditionIssues.
   */
  data: Prisma.XOR<Prisma.ConditionIssueUpdateManyMutationInput, Prisma.ConditionIssueUncheckedUpdateManyInput>
  /**
   * Filter which ConditionIssues to update
   */
  where?: Prisma.ConditionIssueWhereInput
  /**
   * Limit how many ConditionIssues to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConditionIssueIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ConditionIssue upsert
 */
export type ConditionIssueUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConditionIssue
   */
  select?: Prisma.ConditionIssueSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConditionIssue
   */
  omit?: Prisma.ConditionIssueOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConditionIssueInclude<ExtArgs> | null
  /**
   * The filter to search for the ConditionIssue to update in case it exists.
   */
  where: Prisma.ConditionIssueWhereUniqueInput
  /**
   * In case the ConditionIssue found by the `where` argument doesn't exist, create a new ConditionIssue with this data.
   */
  create: Prisma.XOR<Prisma.ConditionIssueCreateInput, Prisma.ConditionIssueUncheckedCreateInput>
  /**
   * In case the ConditionIssue was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ConditionIssueUpdateInput, Prisma.ConditionIssueUncheckedUpdateInput>
}

/**
 * ConditionIssue delete
 */
export type ConditionIssueDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConditionIssue
   */
  select?: Prisma.ConditionIssueSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConditionIssue
   */
  omit?: Prisma.ConditionIssueOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConditionIssueInclude<ExtArgs> | null
  /**
   * Filter which ConditionIssue to delete.
   */
  where: Prisma.ConditionIssueWhereUniqueInput
}

/**
 * ConditionIssue deleteMany
 */
export type ConditionIssueDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ConditionIssues to delete
   */
  where?: Prisma.ConditionIssueWhereInput
  /**
   * Limit how many ConditionIssues to delete.
   */
  limit?: number
}

/**
 * ConditionIssue without action
 */
export type ConditionIssueDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConditionIssue
   */
  select?: Prisma.ConditionIssueSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConditionIssue
   */
  omit?: Prisma.ConditionIssueOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConditionIssueInclude<ExtArgs> | null
}
