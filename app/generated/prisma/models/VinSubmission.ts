
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `VinSubmission` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model VinSubmission
 * 
 */
export type VinSubmissionModel = runtime.Types.Result.DefaultSelection<Prisma.$VinSubmissionPayload>

export type AggregateVinSubmission = {
  _count: VinSubmissionCountAggregateOutputType | null
  _avg: VinSubmissionAvgAggregateOutputType | null
  _sum: VinSubmissionSumAggregateOutputType | null
  _min: VinSubmissionMinAggregateOutputType | null
  _max: VinSubmissionMaxAggregateOutputType | null
}

export type VinSubmissionAvgAggregateOutputType = {
  mileage: number | null
}

export type VinSubmissionSumAggregateOutputType = {
  mileage: number | null
}

export type VinSubmissionMinAggregateOutputType = {
  id: string | null
  vin: string | null
  description: string | null
  mileage: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type VinSubmissionMaxAggregateOutputType = {
  id: string | null
  vin: string | null
  description: string | null
  mileage: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type VinSubmissionCountAggregateOutputType = {
  id: number
  vin: number
  description: number
  mileage: number
  s3Paths: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type VinSubmissionAvgAggregateInputType = {
  mileage?: true
}

export type VinSubmissionSumAggregateInputType = {
  mileage?: true
}

export type VinSubmissionMinAggregateInputType = {
  id?: true
  vin?: true
  description?: true
  mileage?: true
  createdAt?: true
  updatedAt?: true
}

export type VinSubmissionMaxAggregateInputType = {
  id?: true
  vin?: true
  description?: true
  mileage?: true
  createdAt?: true
  updatedAt?: true
}

export type VinSubmissionCountAggregateInputType = {
  id?: true
  vin?: true
  description?: true
  mileage?: true
  s3Paths?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type VinSubmissionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which VinSubmission to aggregate.
   */
  where?: Prisma.VinSubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of VinSubmissions to fetch.
   */
  orderBy?: Prisma.VinSubmissionOrderByWithRelationInput | Prisma.VinSubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.VinSubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` VinSubmissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` VinSubmissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned VinSubmissions
  **/
  _count?: true | VinSubmissionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: VinSubmissionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: VinSubmissionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: VinSubmissionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: VinSubmissionMaxAggregateInputType
}

export type GetVinSubmissionAggregateType<T extends VinSubmissionAggregateArgs> = {
      [P in keyof T & keyof AggregateVinSubmission]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateVinSubmission[P]>
    : Prisma.GetScalarType<T[P], AggregateVinSubmission[P]>
}




export type VinSubmissionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.VinSubmissionWhereInput
  orderBy?: Prisma.VinSubmissionOrderByWithAggregationInput | Prisma.VinSubmissionOrderByWithAggregationInput[]
  by: Prisma.VinSubmissionScalarFieldEnum[] | Prisma.VinSubmissionScalarFieldEnum
  having?: Prisma.VinSubmissionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: VinSubmissionCountAggregateInputType | true
  _avg?: VinSubmissionAvgAggregateInputType
  _sum?: VinSubmissionSumAggregateInputType
  _min?: VinSubmissionMinAggregateInputType
  _max?: VinSubmissionMaxAggregateInputType
}

export type VinSubmissionGroupByOutputType = {
  id: string
  vin: string
  description: string | null
  mileage: number | null
  s3Paths: string[]
  createdAt: Date
  updatedAt: Date
  _count: VinSubmissionCountAggregateOutputType | null
  _avg: VinSubmissionAvgAggregateOutputType | null
  _sum: VinSubmissionSumAggregateOutputType | null
  _min: VinSubmissionMinAggregateOutputType | null
  _max: VinSubmissionMaxAggregateOutputType | null
}

type GetVinSubmissionGroupByPayload<T extends VinSubmissionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<VinSubmissionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof VinSubmissionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], VinSubmissionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], VinSubmissionGroupByOutputType[P]>
      }
    >
  >



export type VinSubmissionWhereInput = {
  AND?: Prisma.VinSubmissionWhereInput | Prisma.VinSubmissionWhereInput[]
  OR?: Prisma.VinSubmissionWhereInput[]
  NOT?: Prisma.VinSubmissionWhereInput | Prisma.VinSubmissionWhereInput[]
  id?: Prisma.StringFilter<"VinSubmission"> | string
  vin?: Prisma.StringFilter<"VinSubmission"> | string
  description?: Prisma.StringNullableFilter<"VinSubmission"> | string | null
  mileage?: Prisma.IntNullableFilter<"VinSubmission"> | number | null
  s3Paths?: Prisma.StringNullableListFilter<"VinSubmission">
  createdAt?: Prisma.DateTimeFilter<"VinSubmission"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"VinSubmission"> | Date | string
}

export type VinSubmissionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  vin?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  mileage?: Prisma.SortOrderInput | Prisma.SortOrder
  s3Paths?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type VinSubmissionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.VinSubmissionWhereInput | Prisma.VinSubmissionWhereInput[]
  OR?: Prisma.VinSubmissionWhereInput[]
  NOT?: Prisma.VinSubmissionWhereInput | Prisma.VinSubmissionWhereInput[]
  vin?: Prisma.StringFilter<"VinSubmission"> | string
  description?: Prisma.StringNullableFilter<"VinSubmission"> | string | null
  mileage?: Prisma.IntNullableFilter<"VinSubmission"> | number | null
  s3Paths?: Prisma.StringNullableListFilter<"VinSubmission">
  createdAt?: Prisma.DateTimeFilter<"VinSubmission"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"VinSubmission"> | Date | string
}, "id">

export type VinSubmissionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  vin?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  mileage?: Prisma.SortOrderInput | Prisma.SortOrder
  s3Paths?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.VinSubmissionCountOrderByAggregateInput
  _avg?: Prisma.VinSubmissionAvgOrderByAggregateInput
  _max?: Prisma.VinSubmissionMaxOrderByAggregateInput
  _min?: Prisma.VinSubmissionMinOrderByAggregateInput
  _sum?: Prisma.VinSubmissionSumOrderByAggregateInput
}

export type VinSubmissionScalarWhereWithAggregatesInput = {
  AND?: Prisma.VinSubmissionScalarWhereWithAggregatesInput | Prisma.VinSubmissionScalarWhereWithAggregatesInput[]
  OR?: Prisma.VinSubmissionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.VinSubmissionScalarWhereWithAggregatesInput | Prisma.VinSubmissionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"VinSubmission"> | string
  vin?: Prisma.StringWithAggregatesFilter<"VinSubmission"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"VinSubmission"> | string | null
  mileage?: Prisma.IntNullableWithAggregatesFilter<"VinSubmission"> | number | null
  s3Paths?: Prisma.StringNullableListFilter<"VinSubmission">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"VinSubmission"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"VinSubmission"> | Date | string
}

export type VinSubmissionCreateInput = {
  id?: string
  vin: string
  description?: string | null
  mileage?: number | null
  s3Paths?: Prisma.VinSubmissionCreates3PathsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type VinSubmissionUncheckedCreateInput = {
  id?: string
  vin: string
  description?: string | null
  mileage?: number | null
  s3Paths?: Prisma.VinSubmissionCreates3PathsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type VinSubmissionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  vin?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mileage?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  s3Paths?: Prisma.VinSubmissionUpdates3PathsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type VinSubmissionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  vin?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mileage?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  s3Paths?: Prisma.VinSubmissionUpdates3PathsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type VinSubmissionCreateManyInput = {
  id?: string
  vin: string
  description?: string | null
  mileage?: number | null
  s3Paths?: Prisma.VinSubmissionCreates3PathsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type VinSubmissionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  vin?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mileage?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  s3Paths?: Prisma.VinSubmissionUpdates3PathsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type VinSubmissionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  vin?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mileage?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  s3Paths?: Prisma.VinSubmissionUpdates3PathsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StringNullableListFilter<$PrismaModel = never> = {
  equals?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel> | null
  has?: string | Prisma.StringFieldRefInput<$PrismaModel> | null
  hasEvery?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  hasSome?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type VinSubmissionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  vin?: Prisma.SortOrder
  description?: Prisma.SortOrder
  mileage?: Prisma.SortOrder
  s3Paths?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type VinSubmissionAvgOrderByAggregateInput = {
  mileage?: Prisma.SortOrder
}

export type VinSubmissionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  vin?: Prisma.SortOrder
  description?: Prisma.SortOrder
  mileage?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type VinSubmissionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  vin?: Prisma.SortOrder
  description?: Prisma.SortOrder
  mileage?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type VinSubmissionSumOrderByAggregateInput = {
  mileage?: Prisma.SortOrder
}

export type VinSubmissionCreates3PathsInput = {
  set: string[]
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type VinSubmissionUpdates3PathsInput = {
  set?: string[]
  push?: string | string[]
}



export type VinSubmissionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  vin?: boolean
  description?: boolean
  mileage?: boolean
  s3Paths?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["vinSubmission"]>

export type VinSubmissionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  vin?: boolean
  description?: boolean
  mileage?: boolean
  s3Paths?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["vinSubmission"]>

export type VinSubmissionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  vin?: boolean
  description?: boolean
  mileage?: boolean
  s3Paths?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["vinSubmission"]>

export type VinSubmissionSelectScalar = {
  id?: boolean
  vin?: boolean
  description?: boolean
  mileage?: boolean
  s3Paths?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type VinSubmissionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "vin" | "description" | "mileage" | "s3Paths" | "createdAt" | "updatedAt", ExtArgs["result"]["vinSubmission"]>

export type $VinSubmissionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "VinSubmission"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    vin: string
    description: string | null
    mileage: number | null
    s3Paths: string[]
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["vinSubmission"]>
  composites: {}
}

export type VinSubmissionGetPayload<S extends boolean | null | undefined | VinSubmissionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$VinSubmissionPayload, S>

export type VinSubmissionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<VinSubmissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: VinSubmissionCountAggregateInputType | true
  }

export interface VinSubmissionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VinSubmission'], meta: { name: 'VinSubmission' } }
  /**
   * Find zero or one VinSubmission that matches the filter.
   * @param {VinSubmissionFindUniqueArgs} args - Arguments to find a VinSubmission
   * @example
   * // Get one VinSubmission
   * const vinSubmission = await prisma.vinSubmission.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends VinSubmissionFindUniqueArgs>(args: Prisma.SelectSubset<T, VinSubmissionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__VinSubmissionClient<runtime.Types.Result.GetResult<Prisma.$VinSubmissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one VinSubmission that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {VinSubmissionFindUniqueOrThrowArgs} args - Arguments to find a VinSubmission
   * @example
   * // Get one VinSubmission
   * const vinSubmission = await prisma.vinSubmission.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends VinSubmissionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, VinSubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__VinSubmissionClient<runtime.Types.Result.GetResult<Prisma.$VinSubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first VinSubmission that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VinSubmissionFindFirstArgs} args - Arguments to find a VinSubmission
   * @example
   * // Get one VinSubmission
   * const vinSubmission = await prisma.vinSubmission.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends VinSubmissionFindFirstArgs>(args?: Prisma.SelectSubset<T, VinSubmissionFindFirstArgs<ExtArgs>>): Prisma.Prisma__VinSubmissionClient<runtime.Types.Result.GetResult<Prisma.$VinSubmissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first VinSubmission that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VinSubmissionFindFirstOrThrowArgs} args - Arguments to find a VinSubmission
   * @example
   * // Get one VinSubmission
   * const vinSubmission = await prisma.vinSubmission.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends VinSubmissionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, VinSubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__VinSubmissionClient<runtime.Types.Result.GetResult<Prisma.$VinSubmissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more VinSubmissions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VinSubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all VinSubmissions
   * const vinSubmissions = await prisma.vinSubmission.findMany()
   * 
   * // Get first 10 VinSubmissions
   * const vinSubmissions = await prisma.vinSubmission.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const vinSubmissionWithIdOnly = await prisma.vinSubmission.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends VinSubmissionFindManyArgs>(args?: Prisma.SelectSubset<T, VinSubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VinSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a VinSubmission.
   * @param {VinSubmissionCreateArgs} args - Arguments to create a VinSubmission.
   * @example
   * // Create one VinSubmission
   * const VinSubmission = await prisma.vinSubmission.create({
   *   data: {
   *     // ... data to create a VinSubmission
   *   }
   * })
   * 
   */
  create<T extends VinSubmissionCreateArgs>(args: Prisma.SelectSubset<T, VinSubmissionCreateArgs<ExtArgs>>): Prisma.Prisma__VinSubmissionClient<runtime.Types.Result.GetResult<Prisma.$VinSubmissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many VinSubmissions.
   * @param {VinSubmissionCreateManyArgs} args - Arguments to create many VinSubmissions.
   * @example
   * // Create many VinSubmissions
   * const vinSubmission = await prisma.vinSubmission.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends VinSubmissionCreateManyArgs>(args?: Prisma.SelectSubset<T, VinSubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many VinSubmissions and returns the data saved in the database.
   * @param {VinSubmissionCreateManyAndReturnArgs} args - Arguments to create many VinSubmissions.
   * @example
   * // Create many VinSubmissions
   * const vinSubmission = await prisma.vinSubmission.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many VinSubmissions and only return the `id`
   * const vinSubmissionWithIdOnly = await prisma.vinSubmission.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends VinSubmissionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, VinSubmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VinSubmissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a VinSubmission.
   * @param {VinSubmissionDeleteArgs} args - Arguments to delete one VinSubmission.
   * @example
   * // Delete one VinSubmission
   * const VinSubmission = await prisma.vinSubmission.delete({
   *   where: {
   *     // ... filter to delete one VinSubmission
   *   }
   * })
   * 
   */
  delete<T extends VinSubmissionDeleteArgs>(args: Prisma.SelectSubset<T, VinSubmissionDeleteArgs<ExtArgs>>): Prisma.Prisma__VinSubmissionClient<runtime.Types.Result.GetResult<Prisma.$VinSubmissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one VinSubmission.
   * @param {VinSubmissionUpdateArgs} args - Arguments to update one VinSubmission.
   * @example
   * // Update one VinSubmission
   * const vinSubmission = await prisma.vinSubmission.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends VinSubmissionUpdateArgs>(args: Prisma.SelectSubset<T, VinSubmissionUpdateArgs<ExtArgs>>): Prisma.Prisma__VinSubmissionClient<runtime.Types.Result.GetResult<Prisma.$VinSubmissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more VinSubmissions.
   * @param {VinSubmissionDeleteManyArgs} args - Arguments to filter VinSubmissions to delete.
   * @example
   * // Delete a few VinSubmissions
   * const { count } = await prisma.vinSubmission.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends VinSubmissionDeleteManyArgs>(args?: Prisma.SelectSubset<T, VinSubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more VinSubmissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VinSubmissionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many VinSubmissions
   * const vinSubmission = await prisma.vinSubmission.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends VinSubmissionUpdateManyArgs>(args: Prisma.SelectSubset<T, VinSubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more VinSubmissions and returns the data updated in the database.
   * @param {VinSubmissionUpdateManyAndReturnArgs} args - Arguments to update many VinSubmissions.
   * @example
   * // Update many VinSubmissions
   * const vinSubmission = await prisma.vinSubmission.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more VinSubmissions and only return the `id`
   * const vinSubmissionWithIdOnly = await prisma.vinSubmission.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends VinSubmissionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, VinSubmissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VinSubmissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one VinSubmission.
   * @param {VinSubmissionUpsertArgs} args - Arguments to update or create a VinSubmission.
   * @example
   * // Update or create a VinSubmission
   * const vinSubmission = await prisma.vinSubmission.upsert({
   *   create: {
   *     // ... data to create a VinSubmission
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the VinSubmission we want to update
   *   }
   * })
   */
  upsert<T extends VinSubmissionUpsertArgs>(args: Prisma.SelectSubset<T, VinSubmissionUpsertArgs<ExtArgs>>): Prisma.Prisma__VinSubmissionClient<runtime.Types.Result.GetResult<Prisma.$VinSubmissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of VinSubmissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VinSubmissionCountArgs} args - Arguments to filter VinSubmissions to count.
   * @example
   * // Count the number of VinSubmissions
   * const count = await prisma.vinSubmission.count({
   *   where: {
   *     // ... the filter for the VinSubmissions we want to count
   *   }
   * })
  **/
  count<T extends VinSubmissionCountArgs>(
    args?: Prisma.Subset<T, VinSubmissionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], VinSubmissionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a VinSubmission.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VinSubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends VinSubmissionAggregateArgs>(args: Prisma.Subset<T, VinSubmissionAggregateArgs>): Prisma.PrismaPromise<GetVinSubmissionAggregateType<T>>

  /**
   * Group by VinSubmission.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VinSubmissionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends VinSubmissionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: VinSubmissionGroupByArgs['orderBy'] }
      : { orderBy?: VinSubmissionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, VinSubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVinSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the VinSubmission model
 */
readonly fields: VinSubmissionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for VinSubmission.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__VinSubmissionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the VinSubmission model
 */
export interface VinSubmissionFieldRefs {
  readonly id: Prisma.FieldRef<"VinSubmission", 'String'>
  readonly vin: Prisma.FieldRef<"VinSubmission", 'String'>
  readonly description: Prisma.FieldRef<"VinSubmission", 'String'>
  readonly mileage: Prisma.FieldRef<"VinSubmission", 'Int'>
  readonly s3Paths: Prisma.FieldRef<"VinSubmission", 'String[]'>
  readonly createdAt: Prisma.FieldRef<"VinSubmission", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"VinSubmission", 'DateTime'>
}
    

// Custom InputTypes
/**
 * VinSubmission findUnique
 */
export type VinSubmissionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VinSubmission
   */
  select?: Prisma.VinSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VinSubmission
   */
  omit?: Prisma.VinSubmissionOmit<ExtArgs> | null
  /**
   * Filter, which VinSubmission to fetch.
   */
  where: Prisma.VinSubmissionWhereUniqueInput
}

/**
 * VinSubmission findUniqueOrThrow
 */
export type VinSubmissionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VinSubmission
   */
  select?: Prisma.VinSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VinSubmission
   */
  omit?: Prisma.VinSubmissionOmit<ExtArgs> | null
  /**
   * Filter, which VinSubmission to fetch.
   */
  where: Prisma.VinSubmissionWhereUniqueInput
}

/**
 * VinSubmission findFirst
 */
export type VinSubmissionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VinSubmission
   */
  select?: Prisma.VinSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VinSubmission
   */
  omit?: Prisma.VinSubmissionOmit<ExtArgs> | null
  /**
   * Filter, which VinSubmission to fetch.
   */
  where?: Prisma.VinSubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of VinSubmissions to fetch.
   */
  orderBy?: Prisma.VinSubmissionOrderByWithRelationInput | Prisma.VinSubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for VinSubmissions.
   */
  cursor?: Prisma.VinSubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` VinSubmissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` VinSubmissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of VinSubmissions.
   */
  distinct?: Prisma.VinSubmissionScalarFieldEnum | Prisma.VinSubmissionScalarFieldEnum[]
}

/**
 * VinSubmission findFirstOrThrow
 */
export type VinSubmissionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VinSubmission
   */
  select?: Prisma.VinSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VinSubmission
   */
  omit?: Prisma.VinSubmissionOmit<ExtArgs> | null
  /**
   * Filter, which VinSubmission to fetch.
   */
  where?: Prisma.VinSubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of VinSubmissions to fetch.
   */
  orderBy?: Prisma.VinSubmissionOrderByWithRelationInput | Prisma.VinSubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for VinSubmissions.
   */
  cursor?: Prisma.VinSubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` VinSubmissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` VinSubmissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of VinSubmissions.
   */
  distinct?: Prisma.VinSubmissionScalarFieldEnum | Prisma.VinSubmissionScalarFieldEnum[]
}

/**
 * VinSubmission findMany
 */
export type VinSubmissionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VinSubmission
   */
  select?: Prisma.VinSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VinSubmission
   */
  omit?: Prisma.VinSubmissionOmit<ExtArgs> | null
  /**
   * Filter, which VinSubmissions to fetch.
   */
  where?: Prisma.VinSubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of VinSubmissions to fetch.
   */
  orderBy?: Prisma.VinSubmissionOrderByWithRelationInput | Prisma.VinSubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing VinSubmissions.
   */
  cursor?: Prisma.VinSubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` VinSubmissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` VinSubmissions.
   */
  skip?: number
  distinct?: Prisma.VinSubmissionScalarFieldEnum | Prisma.VinSubmissionScalarFieldEnum[]
}

/**
 * VinSubmission create
 */
export type VinSubmissionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VinSubmission
   */
  select?: Prisma.VinSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VinSubmission
   */
  omit?: Prisma.VinSubmissionOmit<ExtArgs> | null
  /**
   * The data needed to create a VinSubmission.
   */
  data: Prisma.XOR<Prisma.VinSubmissionCreateInput, Prisma.VinSubmissionUncheckedCreateInput>
}

/**
 * VinSubmission createMany
 */
export type VinSubmissionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many VinSubmissions.
   */
  data: Prisma.VinSubmissionCreateManyInput | Prisma.VinSubmissionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * VinSubmission createManyAndReturn
 */
export type VinSubmissionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VinSubmission
   */
  select?: Prisma.VinSubmissionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the VinSubmission
   */
  omit?: Prisma.VinSubmissionOmit<ExtArgs> | null
  /**
   * The data used to create many VinSubmissions.
   */
  data: Prisma.VinSubmissionCreateManyInput | Prisma.VinSubmissionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * VinSubmission update
 */
export type VinSubmissionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VinSubmission
   */
  select?: Prisma.VinSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VinSubmission
   */
  omit?: Prisma.VinSubmissionOmit<ExtArgs> | null
  /**
   * The data needed to update a VinSubmission.
   */
  data: Prisma.XOR<Prisma.VinSubmissionUpdateInput, Prisma.VinSubmissionUncheckedUpdateInput>
  /**
   * Choose, which VinSubmission to update.
   */
  where: Prisma.VinSubmissionWhereUniqueInput
}

/**
 * VinSubmission updateMany
 */
export type VinSubmissionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update VinSubmissions.
   */
  data: Prisma.XOR<Prisma.VinSubmissionUpdateManyMutationInput, Prisma.VinSubmissionUncheckedUpdateManyInput>
  /**
   * Filter which VinSubmissions to update
   */
  where?: Prisma.VinSubmissionWhereInput
  /**
   * Limit how many VinSubmissions to update.
   */
  limit?: number
}

/**
 * VinSubmission updateManyAndReturn
 */
export type VinSubmissionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VinSubmission
   */
  select?: Prisma.VinSubmissionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the VinSubmission
   */
  omit?: Prisma.VinSubmissionOmit<ExtArgs> | null
  /**
   * The data used to update VinSubmissions.
   */
  data: Prisma.XOR<Prisma.VinSubmissionUpdateManyMutationInput, Prisma.VinSubmissionUncheckedUpdateManyInput>
  /**
   * Filter which VinSubmissions to update
   */
  where?: Prisma.VinSubmissionWhereInput
  /**
   * Limit how many VinSubmissions to update.
   */
  limit?: number
}

/**
 * VinSubmission upsert
 */
export type VinSubmissionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VinSubmission
   */
  select?: Prisma.VinSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VinSubmission
   */
  omit?: Prisma.VinSubmissionOmit<ExtArgs> | null
  /**
   * The filter to search for the VinSubmission to update in case it exists.
   */
  where: Prisma.VinSubmissionWhereUniqueInput
  /**
   * In case the VinSubmission found by the `where` argument doesn't exist, create a new VinSubmission with this data.
   */
  create: Prisma.XOR<Prisma.VinSubmissionCreateInput, Prisma.VinSubmissionUncheckedCreateInput>
  /**
   * In case the VinSubmission was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.VinSubmissionUpdateInput, Prisma.VinSubmissionUncheckedUpdateInput>
}

/**
 * VinSubmission delete
 */
export type VinSubmissionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VinSubmission
   */
  select?: Prisma.VinSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VinSubmission
   */
  omit?: Prisma.VinSubmissionOmit<ExtArgs> | null
  /**
   * Filter which VinSubmission to delete.
   */
  where: Prisma.VinSubmissionWhereUniqueInput
}

/**
 * VinSubmission deleteMany
 */
export type VinSubmissionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which VinSubmissions to delete
   */
  where?: Prisma.VinSubmissionWhereInput
  /**
   * Limit how many VinSubmissions to delete.
   */
  limit?: number
}

/**
 * VinSubmission without action
 */
export type VinSubmissionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VinSubmission
   */
  select?: Prisma.VinSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VinSubmission
   */
  omit?: Prisma.VinSubmissionOmit<ExtArgs> | null
}
