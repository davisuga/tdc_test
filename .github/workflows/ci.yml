name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, copilot/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: tdc_db_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    
    env:
      DATABASE_URL: postgresql://postgres:password@localhost:5432/tdc_db_test
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      AWS_REGION: us-east-1
      S3_BUCKET: tdc-photos
      S3_ENDPOINT: http://localhost:9000
      REDIS_URL: redis://localhost:6379
      NODE_ENV: test
      PRISMA_SKIP_POSTINSTALL_GENERATE: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client redis-tools curl
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json
      
      - name: Setup MinIO
        run: |
          # Start MinIO in background
          docker run -d \
            --name minio \
            -p 9000:9000 \
            -p 9001:9001 \
            -e MINIO_ROOT_USER=minioadmin \
            -e MINIO_ROOT_PASSWORD=minioadmin \
            minio/minio:latest \
            server /data --console-address ":9001"
          
          # Wait for MinIO to be ready
          sleep 10
          
          # Use MinIO client from Docker instead of downloading
          # Configure MinIO and create bucket using docker exec
          docker run --rm --network host \
            -e MC_HOST_minio=http://minioadmin:minioadmin@localhost:9000 \
            minio/mc:latest \
            mb minio/tdc-photos --ignore-existing
      
      - name: Install dependencies
        working-directory: ./app
        run: |
          # Skip Prisma postinstall to avoid binary downloads
          PRISMA_SKIP_POSTINSTALL_GENERATE=true npm ci
      
      - name: Generate Prisma client
        working-directory: ./app
        run: npx prisma generate
      
      - name: Run database migrations
        working-directory: ./app
        run: npx prisma db push
      
      - name: Run lint
        working-directory: ./app
        run: npm run lint
      
      - name: Run build
        working-directory: ./app
        run: npm run build
      
      - name: Wait for services
        run: |
          # Wait for PostgreSQL to be ready
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          
          # Wait for Redis to be ready  
          until redis-cli -h localhost -p 6379 ping; do
            echo "Waiting for Redis..."
            sleep 2
          done
          
          # Wait for MinIO to be ready
          until curl -f http://localhost:9000/minio/health/live; do
            echo "Waiting for MinIO..."
            sleep 2
          done
          
          echo "All services are ready!"
      
      - name: Start server in background
        working-directory: ./app
        run: |
          npm run dev &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          
          # Wait for server to start and be responsive
          timeout 30 bash -c 'until curl -f http://localhost:4000/graphql -H "Content-Type: application/json" -d "{\"query\":\"{ hello }\"}" > /dev/null 2>&1; do sleep 1; done'
          echo "Server is ready!"
        env:
          CI: true
      
      - name: Run tests
        working-directory: ./app
        run: npm test -- --run
        env:
          CI: true
  
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy notification
        run: echo "ðŸš€ Ready for deployment to production!"